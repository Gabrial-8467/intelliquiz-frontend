// src/services/quizAPI.js

const API_KEY = 'AIzaSyAGAvwkhwLo_LA8_Kb1TrDXuDkewQ_FS2w';
const GEMINI_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;
const BACKEND_URL = 'https://intelliquiz-backend-production.up.railway.app/api';

// Existing function to get questions generated by Gemini AI
export const getQuizQuestions = async (topic) => {
  const prompt = `
    Generate 10 multiple choice questions on the topic "${topic}".
    Each question should include:
    - a question string
    - 4 options (as an array)
    - a correct answer

    Format the response exactly like this JSON:
    [
      {
        "question": "What is AI?",
        "options": ["Option A", "Option B", "Option C", "Option D"],
        "answer": "Option B"
      }
    ]
  `;

  try {
    const response = await fetch(GEMINI_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [
          {
            parts: [{ text: prompt }]
          }
        ]
      }),
    });

    const data = await response.json();
    const text = data?.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!text) {
      console.error('Gemini response missing text:', data);
      return [];
    }

    const cleanedText = text.replace(/```json|```/g, '').trim();

    try {
      const questions = JSON.parse(cleanedText);
      return questions;
    } catch (error) {
      console.error('Error parsing the response into JSON:', error);
      return [];
    }
  } catch (error) {
    console.error('Error fetching quiz from Gemini:', error);
    return [];
  }
};

// Function to save a new quiz
export const saveQuiz = async (quizData) => {
  try {
    const response = await fetch(`${BACKEND_URL}/quiz/save`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(quizData)
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to save quiz');
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error saving quiz:', error);
    throw error;
  }
};

// Function to fetch quiz by UUID
export const getQuizByUUID = async (uuid) => {
  try {
    const response = await fetch(`${BACKEND_URL}/quiz/shared/${uuid}`);
    
    if (response.status === 404) {
      throw new Error('Quiz not found. The link might be invalid or expired.');
    }
    
    if (!response.ok) {
      throw new Error('Failed to fetch quiz. Please try again later.');
    }

    const data = await response.json();
    
    if (!data || !data.questions || !Array.isArray(data.questions)) {
      throw new Error('Invalid quiz data received from server.');
    }

    return data;
  } catch (error) {
    console.error('Error fetching quiz by UUID:', error);
    throw error;
  }
};

// Function to save quiz result
export const saveQuizResult = async (resultData) => {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
      throw new Error('You must be logged in to save results');
    }

    // Ensure we have all required fields
    if (!resultData.score || !resultData.totalQuestions || !resultData.topic) {
      throw new Error('Missing required result data');
    }

    const response = await fetch(`${BACKEND_URL}/results`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        score: resultData.score,
        totalQuestions: resultData.totalQuestions,
        topic: resultData.topic,
        answers: resultData.answers || {}
      })
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.message || 'Failed to save quiz result');
    }

    return data;
  } catch (error) {
    console.error('Error saving quiz result:', error);
    throw error;
  }
};

// Function to get user's quiz results
export const getUserQuizResults = async () => {
  try {
    const response = await fetch(`${BACKEND_URL}/results/user`, {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      }
    });

    if (!response.ok) {
      throw new Error('Failed to fetch quiz results');
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching quiz results:', error);
    throw error;
  }
};

// Function to get quiz results by UUID
export const getQuizResultsByUUID = async (uuid) => {
  try {
    const response = await fetch(`${BACKEND_URL}/results/quiz/${uuid}`);

    if (!response.ok) {
      throw new Error('Failed to fetch quiz results');
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching quiz results:', error);
    throw error;
  }
};
